generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  Id                    String                 @id @default(uuid())
  Email                 String                 @unique
  Password              String?
  FullName              String?
  UserProjects          UserProject[]
  SentNotifications     Notification[]         @relation(name: "SentNotifications")
  ReceivedNotifications Notification[]         @relation(name: "ReceivedNotifications")
  Notifications         Notification[]
  ProjectLeadUsers      Project[]              @relation(name: "ProjectLeadUser")
  UserBoard             UserBoard[]
  ProfilePicture        String?
  UserFavoriteProject   UserFavouriteProject[]
  ReportedIssues        Issue[]                @relation("Reporter")
  AssignedIssues        Issue[]                @relation("Assignee")
}

model Project {
  Id                  String                 @id @default(uuid())
  Name                String
  Key                 String                 @unique
  Description         String?
  LeadUserId          String
  CreatedAt           DateTime               @default(now())
  Boards              Board[]
  Issues              Issue[]
  LeadUser            User                   @relation("ProjectLeadUser", fields: [LeadUserId], references: [Id])
  UserProjects        UserProject[]
  UserFavoriteProject UserFavouriteProject[]
}

model Board {
  Id         String      @id @default(uuid())
  Name       String
  Key        String      @unique
  ProjectId  String
  LeadUserId String
  CreatedAt  DateTime    @default(now())
  Backlog    Backlog?
  Project    Project     @relation(fields: [ProjectId], references: [Id])
  Columns    Column[]
  Issues     Issue[]
  Sprints    Sprint[]
  UserBoards UserBoard[]
}

model Backlog {
  Id      String  @id @default(uuid())
  BoardId String  @unique
  Board   Board   @relation(fields: [BoardId], references: [Id])
  Issues  Issue[]
}

model Sprint {
  Id         String   @id @default(uuid())
  Name       String
  SprintGoal String?
  BoardId    String
  IsActive   Boolean  @default(false)
  Issues     Issue[]
  Board      Board    @relation(fields: [BoardId], references: [Id])
  StartDate  DateTime @default(now())
  EndDate    DateTime @default(now())
}

model Column {
  Id      String  @id @default(uuid())
  Name    String
  Status  Int
  BoardId String
  Board   Board   @relation(fields: [BoardId], references: [Id])
  Issues  Issue[]
}

model Issue {
  Id             String   @id @default(uuid())
  Key            String   @unique
  Summary        String
  Description    String?
  ReporterUserId String?
  AssigneeUserId String?
  Status         Int      @default(1)
  Type           String   @default("Task")
  CreatedAt      DateTime @default(now())
  ProjectId      String
  LabelId        String?
  BoardId        String?
  ColumnId       String?
  BacklogId      String?
  SprintId       String?
  ReporterUser   User?    @relation("Reporter", fields: [ReporterUserId], references: [Id])
  AssigneeUser   User?    @relation("Assignee", fields: [AssigneeUserId], references: [Id])
  Backlog        Backlog? @relation(fields: [BacklogId], references: [Id])
  Board          Board?   @relation(fields: [BoardId], references: [Id])
  Column         Column?  @relation(fields: [ColumnId], references: [Id])
  Label          Label?   @relation(fields: [LabelId], references: [Id])
  Project        Project  @relation(fields: [ProjectId], references: [Id])
  Sprint         Sprint?  @relation(fields: [SprintId], references: [Id])
  ProjectKey     String?
}

model Label {
  Id     String  @id @default(uuid())
  Name   String  @unique
  Issues Issue[]
}

model UserProject {
  UserId    String
  ProjectId String
  Project   Project  @relation(fields: [ProjectId], references: [Id])
  User      User     @relation(fields: [UserId], references: [Id])
  Role      UserRole @default(Viewer)

  @@id([UserId, ProjectId])
}

model UserBoard {
  UserId    String
  BoardId   String
  ProjectId String
  Board     Board    @relation(fields: [BoardId], references: [Id])
  User      User     @relation(fields: [UserId], references: [Id])
  Role      UserRole @default(Viewer)

  @@id([UserId, BoardId])
}

model UserFavouriteProject {
  UserId    String
  ProjectId String
  Project   Project @relation(fields: [ProjectId], references: [Id])
  User      User    @relation(fields: [UserId], references: [Id])

  @@id([UserId, ProjectId])
}

model Notification {
  Id         String   @id @default(uuid())
  FromUser   User     @relation(name: "SentNotifications", fields: [FromUserId], references: [Id])
  FromUserId String
  ToUser     User     @relation(name: "ReceivedNotifications", fields: [ToUserId], references: [Id])
  ToUserId   String
  CreatedAt  DateTime @default(now())
  Message    String   @db.VarChar(128)
  IsRead     Boolean  @default(false)
  User       User?    @relation(fields: [UserId], references: [Id])
  UserId     String?
}

model EmailTemplate {
  Id        String            @id @default(uuid())
  From      String
  Subject   String
  HtmlBody  String
  Type      EmailTemplateEnum
  CreatedAt DateTime          @default(now())
  UpdatedAt DateTime          @updatedAt
}

enum EmailTemplateEnum {
  Welcome
  SendOtp
  SetPassword
}

enum UserRole {
  Admin
  Member
  Viewer
}

model OtpCode {
  Id        String   @id @default(uuid())
  Email     String
  Code      String
  ExpiresAt DateTime
  Used      Boolean  @default(false)
}
